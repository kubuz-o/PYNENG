# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску, как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24,
вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28  в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""

subnet_template = '''
Network:
{0}
{1:<8}  {2:<8}  {3:<8}  {4:<8} 
{1:08b}  {2:08b}  {3:08b}  {4:08b} 
Mask:
/{5} 
{6:<8}  {7:<8}  {8:<8}  {9:<8} 
{10}  {11}  {12}  {13} 
'''

data = input("Введите адрес подсети в формате 'network/mask':")
data_network = data.split('/')[0]  # адрес хоста
mask = data.split('/')[1]  # маска
mask_bin = '1' * int(mask) + '0' * (32 - int(mask))  # маска в двоичном формате

data_network_bin = '{0:08b}{1:08b}{2:08b}{3:08b}'.format(int(data_network.split('.')[0]), int(data_network.split('.')[1]),
                                                         int(data_network.split('.')[2]), int(data_network.split('.')[3]))

network_addr_bin = data_network_bin[0:mask_bin.count('1')] + '0' * (32 - mask_bin.count('1'))  # адрес подсети в двоичном формате

# адрес подсети в десятичном формате

network_addr_dec = str(int(network_addr_bin[0:8], 2)) + '.' + str(int(network_addr_bin[8:16], 2)) + "." + \
                   str(int(network_addr_bin[16:24], 2)) + '.' + str(int(network_addr_bin[24:], 2))

print(subnet_template.format(network_addr_dec,
                             int(network_addr_dec.split('.')[0]),
                             int(network_addr_dec.split('.')[1]),
                             int(network_addr_dec.split('.')[2]),
                             int(network_addr_dec.split('.')[3]),
                             mask,
                             int(mask_bin[0:8], 2),
                             int(mask_bin[8:16], 2),
                             int(mask_bin[16:24], 2),
                             int(mask_bin[24:], 2),
                             mask_bin[0:8],
                             mask_bin[8:16],
                             mask_bin[16:24],
                             mask_bin[24:]))

